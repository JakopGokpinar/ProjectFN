{"ast":null,"code":"var _jsxFileName = \"/home/tolga/VS Code workspace/Brukth\\xE5nd/secondhand/src/Pages/Profile/Profile/Profile.js\";\nimport './Profile.css';\nimport React from 'react';\nimport { instanceAxs } from '../../../config/api.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onImageChange = event => {\n      if (!event.target.files) return; //target.files seçilen dosyaları döner\n\n      const file = event.target.files;\n      Array.from(event.target.files).forEach(file => {\n        var reader = new FileReader(); //Yüklenen resmin datasını oku.\n\n        reader.readAsDataURL(file);\n        reader.addEventListener('load', () => {\n          imageArray.push({\n            name: file.name,\n            data: reader.result\n          });\n        });\n      });\n      this.setState({\n        imageArray\n      });\n    };\n\n    this.uploadImagesToServer = (formData, cb) => {\n      instanceAxs.post('/newannonce/imageupload', formData).then(result => {\n        if (result.data.message === 'images uploaded') {\n          var imageLocations = result.data.files.map(e => e.location);\n          this.setState({\n            imageLocations\n          });\n          cb(); // run uploadAnnoncesToDb after uploading images\n        }\n      }).catch(err => console.log(err));\n    };\n\n    this.getProfileImage = () => {\n      instanceAxs.get('/profile/getprofileimg').then(response => {\n        console.log(response);\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      profileImgLink: '',\n      isLoading: true\n    };\n  }\n\n  componentDidMount() {\n    this.getProfileImage();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !this.state.isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          accept: \"image/*\",\n          multiple: true,\n          onChange: this.onImageChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Profile;","map":{"version":3,"sources":["/home/tolga/VS Code workspace/Brukthånd/secondhand/src/Pages/Profile/Profile/Profile.js"],"names":["React","instanceAxs","Profile","Component","constructor","props","onImageChange","event","target","files","file","Array","from","forEach","reader","FileReader","readAsDataURL","addEventListener","imageArray","push","name","data","result","setState","uploadImagesToServer","formData","cb","post","then","message","imageLocations","map","e","location","catch","err","console","log","getProfileImage","get","response","error","state","profileImgLink","isLoading","componentDidMount","render"],"mappings":";AAAA,OAAO,eAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,wBAA5B;;;AAEA,MAAMC,OAAN,SAAsBF,KAAK,CAACG,SAA5B,CAAsC;AAElCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAQlBC,aARkB,GAQDC,KAAD,IAAW;AACvB,UAAG,CAACA,KAAK,CAACC,MAAN,CAAaC,KAAjB,EAAwB,OADD,CACW;;AAElC,YAAMC,IAAI,GAAGH,KAAK,CAACC,MAAN,CAAaC,KAA1B;AACAE,MAAAA,KAAK,CAACC,IAAN,CAAWL,KAAK,CAACC,MAAN,CAAaC,KAAxB,EAA+BI,OAA/B,CAAuCH,IAAI,IAAI;AAC7C,YAAII,MAAM,GAAG,IAAIC,UAAJ,EAAb,CAD6C,CACb;;AAChCD,QAAAA,MAAM,CAACE,aAAP,CAAqBN,IAArB;AACAI,QAAAA,MAAM,CAACG,gBAAP,CAAwB,MAAxB,EAAgC,MAAM;AAAEC,UAAAA,UAAU,CAACC,IAAX,CAAgB;AAACC,YAAAA,IAAI,EAAEV,IAAI,CAACU,IAAZ;AAAkBC,YAAAA,IAAI,EAAEP,MAAM,CAACQ;AAA/B,WAAhB;AAAwD,SAAhG;AACD,OAJD;AAMA,WAAKC,QAAL,CAAc;AAAEL,QAAAA;AAAF,OAAd;AACD,KAnBe;;AAAA,SAqBlBM,oBArBkB,GAqBM,CAACC,QAAD,EAAWC,EAAX,KAAkB;AACtCzB,MAAAA,WAAW,CAAC0B,IAAZ,CAAiB,yBAAjB,EAA4CF,QAA5C,EAAsDG,IAAtD,CAA2DN,MAAM,IAAI;AAEjE,YAAIA,MAAM,CAACD,IAAP,CAAYQ,OAAZ,KAAwB,iBAA5B,EAA+C;AAC7C,cAAIC,cAAc,GAAGR,MAAM,CAACD,IAAP,CAAYZ,KAAZ,CAAkBsB,GAAlB,CAAsBC,CAAC,IAAIA,CAAC,CAACC,QAA7B,CAArB;AACA,eAAKV,QAAL,CAAc;AAAEO,YAAAA;AAAF,WAAd;AACAJ,UAAAA,EAAE,GAH2C,CAGvC;AACP;AACF,OAPH,EAQGQ,KARH,CAQUC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CARjB;AASH,KA/BiB;;AAAA,SAiClBG,eAjCkB,GAiCA,MAAM;AACpBrC,MAAAA,WAAW,CAACsC,GAAZ,CAAgB,wBAAhB,EAA0CX,IAA1C,CAA+CY,QAAQ,IAAI;AACvDJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACH,OAFD,EAGCN,KAHD,CAGOO,KAAK,IAAI;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACH,OALD;AAMH,KAxCiB;;AAEd,SAAKC,KAAL,GAAa;AACTC,MAAAA,cAAc,EAAE,EADP;AAETC,MAAAA,SAAS,EAAE;AAFF,KAAb;AAIH;;AAoCDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKP,eAAL;AACH;;AAEDQ,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,gBACK,CAAC,KAAKJ,KAAL,CAAWE,SAAZ,gBACD;AAAA,+BACI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,IAAI,EAAC,OAAxB;AAAgC,UAAA,MAAM,EAAC,SAAvC;AAAiD,UAAA,QAAQ,MAAzD;AAA0D,UAAA,QAAQ,EAAE,KAAKtC,aAAzE;AAAwF,UAAA,QAAQ;AAAhG;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADC,gBAMD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AA5DiC;;AA+DtC,eAAeJ,OAAf","sourcesContent":["import './Profile.css';\r\nimport React from 'react';\r\nimport { instanceAxs } from '../../../config/api.js';\r\n\r\nclass Profile extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            profileImgLink: '',\r\n            isLoading: true\r\n        }\r\n    }\r\n\r\n    onImageChange = (event) => {\r\n        if(!event.target.files) return;   //target.files seçilen dosyaları döner\r\n      \r\n        const file = event.target.files;\r\n        Array.from(event.target.files).forEach(file => { \r\n          var reader = new FileReader();  //Yüklenen resmin datasını oku.\r\n          reader.readAsDataURL(file);\r\n          reader.addEventListener('load', () => { imageArray.push({name: file.name, data: reader.result})})\r\n        })  \r\n       \r\n        this.setState({ imageArray})\r\n      };\r\n\r\n    uploadImagesToServer =  (formData, cb) => {\r\n        instanceAxs.post('/newannonce/imageupload', formData).then(result => {\r\n      \r\n            if (result.data.message === 'images uploaded') {\r\n              var imageLocations = result.data.files.map(e => e.location)\r\n              this.setState({ imageLocations })\r\n              cb(); // run uploadAnnoncesToDb after uploading images\r\n            }\r\n          })\r\n          .catch( err => console.log(err) );\r\n    }\r\n\r\n    getProfileImage = () => {\r\n        instanceAxs.get('/profile/getprofileimg').then(response => {\r\n            console.log(response)\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getProfileImage();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {!this.state.isLoading ? \r\n                <div>\r\n                    <input type=\"file\" name=\"image\" accept=\"image/*\" multiple onChange={this.onImageChange} required></input>\r\n\r\n                </div>\r\n                :\r\n                <p>Loading</p>}\r\n            </div>         \r\n        )\r\n    }\r\n}\r\n\r\nexport default Profile;"]},"metadata":{},"sourceType":"module"}