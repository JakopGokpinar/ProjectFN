{"ast":null,"code":"const createImage = async url => new Promise((resolve, reject) => {\n  var newImage = new Image();\n  newImage.addEventListener(\"load\", () => resolve(newImage));\n  newImage.addEventListener(\"error\", error => reject(error));\n  newImage.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n  newImage.src = url;\n});\nconst getCroppedImage = async imageSrc => {\n  const myImage = await createImage(imageSrc);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  canvas.width = myImage.width;\n  canvas.height = myImage.height;\n\n  // draw rotated image and store data.\n  ctx.drawImage(myImage, 0, 0, myImage.width, myImage.height);\n  const data = ctx.getImageData(0, 0, 100, 100);\n\n  // paste generated rotate image with correct offsets for x,y crop values.\n  ctx.putImageData(data, 150, 0, 0, 0, 0, 0);\n\n  // As Base64 string\n  // return canvas.toDataURL(\"image/jpeg\");\n  return canvas;\n};\nmodule.exports = {\n  createImage,\n  getCroppedImage\n};","map":{"version":3,"names":["createImage","url","Promise","resolve","reject","newImage","Image","addEventListener","error","setAttribute","src","getCroppedImage","imageSrc","myImage","canvas","document","createElement","ctx","getContext","width","height","drawImage","data","getImageData","putImageData","module","exports"],"sources":["/home/tolga/VS Code workspace/BrukthÃ¥nd/secondhand/src/utils/cropImage.js"],"sourcesContent":["\nconst createImage = async (url) =>\n    new Promise((resolve, reject) => {\n        var newImage = new Image();\n        newImage.addEventListener(\"load\", () => resolve(newImage));\n        newImage.addEventListener(\"error\", (error) => reject(error));\n        newImage.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n        newImage.src = url;\n    });\n\n\nconst getCroppedImage = async (imageSrc) => {\n    const myImage = await createImage(imageSrc);\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n\n    canvas.width = myImage.width;\n    canvas.height = myImage.height;\n\n    // draw rotated image and store data.\n    ctx.drawImage(\n        myImage,\n        0, 0, myImage.width, myImage.height\n    );\n\n    const data = ctx.getImageData(0, 0, 100,100);\n\n    // paste generated rotate image with correct offsets for x,y crop values.\n    ctx.putImageData(\n        data, 150, 0, 0, 0, 0, 0\n    );\n\n    // As Base64 string\n    // return canvas.toDataURL(\"image/jpeg\");\n    return canvas;\n}\n\nmodule.exports = {createImage, getCroppedImage}"],"mappings":"AACA,MAAMA,WAAW,GAAG,MAAOC,GAAG,IAC1B,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC7B,IAAIC,QAAQ,GAAG,IAAIC,KAAK,EAAE;EAC1BD,QAAQ,CAACE,gBAAgB,CAAC,MAAM,EAAE,MAAMJ,OAAO,CAACE,QAAQ,CAAC,CAAC;EAC1DA,QAAQ,CAACE,gBAAgB,CAAC,OAAO,EAAGC,KAAK,IAAKJ,MAAM,CAACI,KAAK,CAAC,CAAC;EAC5DH,QAAQ,CAACI,YAAY,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,CAAC;EACnDJ,QAAQ,CAACK,GAAG,GAAGT,GAAG;AACtB,CAAC,CAAC;AAGN,MAAMU,eAAe,GAAG,MAAOC,QAAQ,IAAK;EACxC,MAAMC,OAAO,GAAG,MAAMb,WAAW,CAACY,QAAQ,CAAC;EAC3C,MAAME,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAC/C,MAAMC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;EAEnCJ,MAAM,CAACK,KAAK,GAAGN,OAAO,CAACM,KAAK;EAC5BL,MAAM,CAACM,MAAM,GAAGP,OAAO,CAACO,MAAM;;EAE9B;EACAH,GAAG,CAACI,SAAS,CACTR,OAAO,EACP,CAAC,EAAE,CAAC,EAAEA,OAAO,CAACM,KAAK,EAAEN,OAAO,CAACO,MAAM,CACtC;EAED,MAAME,IAAI,GAAGL,GAAG,CAACM,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAC,GAAG,CAAC;;EAE5C;EACAN,GAAG,CAACO,YAAY,CACZF,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAC3B;;EAED;EACA;EACA,OAAOR,MAAM;AACjB,CAAC;AAEDW,MAAM,CAACC,OAAO,GAAG;EAAC1B,WAAW;EAAEW;AAAe,CAAC"},"metadata":{},"sourceType":"module"}