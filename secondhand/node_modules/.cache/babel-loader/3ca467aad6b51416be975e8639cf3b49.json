{"ast":null,"code":"var _jsxFileName = \"/home/tolga/VS Code workspace/Brukth\\xE5nd/secondhand/src/Pages/NewAnnonce/NewAnnonce.js\";\nimport React from \"react\";\nimport \"./NewAnnonce.css\";\nimport { getCroppedImage } from \"../../utils/cropImage\";\nimport { dataURLtoFile } from \"../../utils/dataURltoFile\";\nimport { instanceAxs } from \"../../config/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewAnnonce extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.submitAnnonce = async event => {\n      event.preventDefault();\n      var annonceObject = {};\n\n      for (let i = 0; i < event.target.length; i++) {\n        let element = event.target[i];\n        let propTitle = element.name;\n        if (propTitle === 'image' || propTitle === 'button') continue;\n        annonceObject[propTitle] = element.value;\n        this.setState({\n          annonceProperties: annonceObject\n        });\n      }\n\n      const formData = await this.convertImagesToFormData();\n      this.uploadImagesToServer(formData, t);\n      this.uploadAnnonceToServer();\n    };\n\n    this.onImageChange = event => {\n      if (!event.target.files) return; //target.files seçilen dosyaları döner\n\n      const imageArray = []; // create an array to store readable data of images\n      // Array.from() target.files'ı iterable bir array'e dönüştürür\n\n      Array.from(event.target.files).forEach(file => {\n        var reader = new FileReader(); //Yüklenen resmin datasını oku.\n\n        reader.readAsDataURL(file);\n        reader.addEventListener('load', () => {\n          imageArray.push({\n            name: file.name,\n            data: reader.result\n          });\n        });\n      });\n      this.setState({\n        imageArray\n      });\n    };\n\n    this.convertImagesToFormData = async () => {\n      var formData = new FormData();\n      const imageArray = this.state.imageArray;\n\n      for (const image of imageArray) {\n        //await kullanımı için for...of döngüsü\n        const canvas = await getCroppedImage(image.data);\n        const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n        const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\n        formData.append(\"annonceImages\", convertedUrltoFile);\n        return formData;\n      }\n    };\n\n    this.uploadImagesToServer = (formData, cb) => {\n      instanceAxs.post('/newannonce/imageupload', formData).then(result => {\n        console.log(result);\n\n        if (result.data.message = 'images uploaded') {\n          var imageLocations = result.data.files.map(e => e.location);\n          this.setState({\n            imageLocations\n          });\n          cb();\n        }\n      }).catch(err => console.log(err));\n    };\n\n    this.uploadAnnonceToServer = () => {\n      console.log('image loc:', this.state.imageLocations);\n      let annonce = {\n        annonceproperties: this.state.annonceProperties,\n        imagelocations: this.state.imageLocations\n      };\n      instanceAxs.post('/newannonce/create', annonce).then(result => {\n        console.log(result);\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.state = {\n      imageArray: [],\n      imageLocations: [],\n      annonceProperties: {}\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"annonceFormDiv\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"annonce-form\",\n        onSubmit: this.submitAnnonce,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Tittel\",\n          name: \"title\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Price\",\n          name: \"price\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          accept: \"image/*\",\n          multiple: true,\n          onChange: this.onImageChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          name: \"button\",\n          children: \"Publish\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default NewAnnonce;","map":{"version":3,"sources":["/home/tolga/VS Code workspace/Brukthånd/secondhand/src/Pages/NewAnnonce/NewAnnonce.js"],"names":["React","getCroppedImage","dataURLtoFile","instanceAxs","NewAnnonce","Component","constructor","props","submitAnnonce","event","preventDefault","annonceObject","i","target","length","element","propTitle","name","value","setState","annonceProperties","formData","convertImagesToFormData","uploadImagesToServer","t","uploadAnnonceToServer","onImageChange","files","imageArray","Array","from","forEach","file","reader","FileReader","readAsDataURL","addEventListener","push","data","result","FormData","state","image","canvas","canvasDataUrl","toDataURL","convertedUrltoFile","append","cb","post","then","console","log","message","imageLocations","map","e","location","catch","err","annonce","annonceproperties","imagelocations","render"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport \"./NewAnnonce.css\";\nimport { getCroppedImage } from \"../../utils/cropImage\";\nimport { dataURLtoFile } from \"../../utils/dataURltoFile\";\nimport { instanceAxs } from \"../../config/api\";\n\nclass NewAnnonce extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        imageArray: [],\n        imageLocations: [],\n        annonceProperties: {}\n    }\n} \n\nsubmitAnnonce = async (event) => {\n  event.preventDefault();\n\n  var annonceObject = {};\n\n  for (let i = 0; i < event.target.length; i++) {\n    let element = event.target[i];\n    let propTitle = element.name;\n\n    if (propTitle === 'image' || propTitle === 'button') continue;\n\n    annonceObject[propTitle] = element.value;\n    this.setState({ annonceProperties: annonceObject})\n  }\n\n  const formData = await this.convertImagesToFormData();\n   this.uploadImagesToServer(formData, t);\n   this.uploadAnnonceToServer();\n}\n\n onImageChange = (event) => {\n  if(!event.target.files) return;   //target.files seçilen dosyaları döner\n\n  const imageArray = [];  // create an array to store readable data of images\n  // Array.from() target.files'ı iterable bir array'e dönüştürür\n  Array.from(event.target.files).forEach(file => { \n    var reader = new FileReader();  //Yüklenen resmin datasını oku.\n    reader.readAsDataURL(file);\n    reader.addEventListener('load', () => { imageArray.push({name: file.name, data: reader.result})})\n  })  \n \n  this.setState({ imageArray})\n};\n\n\n convertImagesToFormData =  async () => {\n  var formData = new FormData();\n  const imageArray = this.state.imageArray;\n\n  for (const image of imageArray) {   //await kullanımı için for...of döngüsü\n    const canvas = await getCroppedImage(image.data);\n    const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n    const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\n\n    formData.append(\"annonceImages\", convertedUrltoFile);\n    return formData;\n  }\n }\n\n\n uploadImagesToServer =  (formData, cb) => {\n  instanceAxs.post('/newannonce/imageupload', formData).then(result => {\n    console.log(result)\n\n      if (result.data.message = 'images uploaded') {\n        var imageLocations = result.data.files.map(e => e.location)\n\n        this.setState({ imageLocations })\n        cb();\n      }\n    })\n    .catch(err => console.log(err));\n }\n\n uploadAnnonceToServer =  () => {\n  console.log('image loc:', this.state.imageLocations)\n  let annonce = {annonceproperties: this.state.annonceProperties, imagelocations: this.state.imageLocations}\n  instanceAxs.post('/newannonce/create', annonce)\n  .then(result => {\n    console.log(result)\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n }\n\n\n  render() {\n    return (\n      <div className=\"annonceFormDiv\">\n        <form id=\"annonce-form\" onSubmit={this.submitAnnonce}>\n          <input type=\"text\" placeholder=\"Tittel\" name=\"title\" required></input>\n          <input type=\"text\" placeholder=\"Price\" name=\"price\" required></input>\n          <input type=\"file\" name=\"image\" accept=\"image/*\" multiple onChange={this.onImageChange} required></input>\n          <button type=\"submit\" name=\"button\">Publish</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default NewAnnonce;\n"]},"metadata":{},"sourceType":"module"}