{"ast":null,"code":"var _jsxFileName = \"/home/tolga/VS Code workspace/Brukth\\xE5nd/secondhand/src/Pages/Profile/Profile/Profile.js\";\nimport './Profile.css';\nimport React from 'react';\nimport { instanceAxs } from '../../../config/api.js';\nimport { getCroppedImage } from '../../../utils/cropImage';\nimport { dataURLtoFile } from '../../../utils/dataURltoFile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onImageChange = event => {\n      if (!event.target.files) return; //target.files seçilen dosyaları döner\n\n      const file = event.target.files;\n      const profileImgBinary = null;\n      var reader = new FileReader(); //Yüklenen resmin datasını oku.\n\n      reader.readAsDataURL(file);\n      reader.addEventListener('load', () => {\n        profileImgBinary = {\n          name: 'profileImage',\n          data: reader.result\n        };\n      });\n      this.setState({\n        imageArray\n      });\n    };\n\n    this.convertImagesToFormData = async () => {\n      var formData = new FormData();\n      const imageArray = this.state.imageArray;\n\n      for (const image of imageArray) {\n        //await kullanımı için for...of döngüsü\n        const canvas = await getCroppedImage(image.data);\n        const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n        const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\n        formData.append(\"annonceImages\", convertedUrltoFile);\n        return formData;\n      }\n    };\n\n    this.uploadImagesToServer = (formData, cb) => {\n      instanceAxs.post('/newannonce/imageupload', formData).then(result => {\n        if (result.data.message === 'images uploaded') {\n          var imageLocations = result.data.files.map(e => e.location);\n          this.setState({\n            imageLocations\n          });\n          cb(); // run uploadAnnoncesToDb after uploading images\n        }\n      }).catch(err => console.log(err));\n    };\n\n    this.getProfileImage = () => {\n      instanceAxs.get('/profile/getprofileimg').then(response => {\n        console.log(response);\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      profileImgLink: '',\n      profileImgBinary: '',\n      isLoading: true\n    };\n  }\n\n  componentDidMount() {\n    this.getProfileImage();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !this.state.isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          accept: \"image/*\",\n          multiple: true,\n          onChange: this.onImageChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Profile;","map":{"version":3,"sources":["/home/tolga/VS Code workspace/Brukthånd/secondhand/src/Pages/Profile/Profile/Profile.js"],"names":["React","instanceAxs","getCroppedImage","dataURLtoFile","Profile","Component","constructor","props","onImageChange","event","target","files","file","profileImgBinary","reader","FileReader","readAsDataURL","addEventListener","name","data","result","setState","imageArray","convertImagesToFormData","formData","FormData","state","image","canvas","canvasDataUrl","toDataURL","convertedUrltoFile","append","uploadImagesToServer","cb","post","then","message","imageLocations","map","e","location","catch","err","console","log","getProfileImage","get","response","error","profileImgLink","isLoading","componentDidMount","render"],"mappings":";AAAA,OAAO,eAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,aAAT,QAA8B,8BAA9B;;;AAEA,MAAMC,OAAN,SAAsBJ,KAAK,CAACK,SAA5B,CAAsC;AAElCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SASlBC,aATkB,GASDC,KAAD,IAAW;AACvB,UAAG,CAACA,KAAK,CAACC,MAAN,CAAaC,KAAjB,EAAwB,OADD,CACW;;AAElC,YAAMC,IAAI,GAAGH,KAAK,CAACC,MAAN,CAAaC,KAA1B;AACA,YAAME,gBAAgB,GAAG,IAAzB;AAEE,UAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb,CANqB,CAMW;;AAChCD,MAAAA,MAAM,CAACE,aAAP,CAAqBJ,IAArB;AACAE,MAAAA,MAAM,CAACG,gBAAP,CAAwB,MAAxB,EAAgC,MAAM;AAAEJ,QAAAA,gBAAgB,GAAG;AAACK,UAAAA,IAAI,EAAE,cAAP;AAAuBC,UAAAA,IAAI,EAAEL,MAAM,CAACM;AAApC,SAAnB;AAAgE,OAAxG;AAEF,WAAKC,QAAL,CAAc;AAAEC,QAAAA;AAAF,OAAd;AACD,KApBe;;AAAA,SAsBhBC,uBAtBgB,GAsBW,YAAY;AACrC,UAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACA,YAAMH,UAAU,GAAG,KAAKI,KAAL,CAAWJ,UAA9B;;AAEA,WAAK,MAAMK,KAAX,IAAoBL,UAApB,EAAgC;AAAI;AAClC,cAAMM,MAAM,GAAG,MAAM1B,eAAe,CAACyB,KAAK,CAACR,IAAP,CAApC;AACA,cAAMU,aAAa,GAAGD,MAAM,CAACE,SAAP,CAAiB,YAAjB,CAAtB;AACA,cAAMC,kBAAkB,GAAG5B,aAAa,CAAC0B,aAAD,EAAgBF,KAAK,CAACT,IAAtB,CAAxC;AAEAM,QAAAA,QAAQ,CAACQ,MAAT,CAAgB,eAAhB,EAAiCD,kBAAjC;AACA,eAAOP,QAAP;AACD;AACD,KAlCc;;AAAA,SAoClBS,oBApCkB,GAoCM,CAACT,QAAD,EAAWU,EAAX,KAAkB;AACtCjC,MAAAA,WAAW,CAACkC,IAAZ,CAAiB,yBAAjB,EAA4CX,QAA5C,EAAsDY,IAAtD,CAA2DhB,MAAM,IAAI;AAEjE,YAAIA,MAAM,CAACD,IAAP,CAAYkB,OAAZ,KAAwB,iBAA5B,EAA+C;AAC7C,cAAIC,cAAc,GAAGlB,MAAM,CAACD,IAAP,CAAYR,KAAZ,CAAkB4B,GAAlB,CAAsBC,CAAC,IAAIA,CAAC,CAACC,QAA7B,CAArB;AACA,eAAKpB,QAAL,CAAc;AAAEiB,YAAAA;AAAF,WAAd;AACAJ,UAAAA,EAAE,GAH2C,CAGvC;AACP;AACF,OAPH,EAQGQ,KARH,CAQUC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CARjB;AASH,KA9CiB;;AAAA,SAgDlBG,eAhDkB,GAgDA,MAAM;AACpB7C,MAAAA,WAAW,CAAC8C,GAAZ,CAAgB,wBAAhB,EAA0CX,IAA1C,CAA+CY,QAAQ,IAAI;AACvDJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACH,OAFD,EAGCN,KAHD,CAGOO,KAAK,IAAI;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACH,OALD;AAMH,KAvDiB;;AAEd,SAAKvB,KAAL,GAAa;AACTwB,MAAAA,cAAc,EAAE,EADP;AAETrC,MAAAA,gBAAgB,EAAE,EAFT;AAGTsC,MAAAA,SAAS,EAAE;AAHF,KAAb;AAKH;;AAkDDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKN,eAAL;AACH;;AAEDO,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,gBACK,CAAC,KAAK3B,KAAL,CAAWyB,SAAZ,gBACD;AAAA,+BACI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,IAAI,EAAC,OAAxB;AAAgC,UAAA,MAAM,EAAC,SAAvC;AAAiD,UAAA,QAAQ,MAAzD;AAA0D,UAAA,QAAQ,EAAE,KAAK3C,aAAzE;AAAwF,UAAA,QAAQ;AAAhG;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADC,gBAMD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AA3EiC;;AA8EtC,eAAeJ,OAAf","sourcesContent":["import './Profile.css';\r\nimport React from 'react';\r\nimport { instanceAxs } from '../../../config/api.js';\r\nimport { getCroppedImage } from '../../../utils/cropImage';\r\nimport { dataURLtoFile } from '../../../utils/dataURltoFile';\r\n\r\nclass Profile extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            profileImgLink: '',\r\n            profileImgBinary: '',\r\n            isLoading: true\r\n        }\r\n    }\r\n\r\n    onImageChange = (event) => {\r\n        if(!event.target.files) return;   //target.files seçilen dosyaları döner\r\n      \r\n        const file = event.target.files;\r\n        const profileImgBinary = null;\r\n\r\n          var reader = new FileReader();  //Yüklenen resmin datasını oku.\r\n          reader.readAsDataURL(file);\r\n          reader.addEventListener('load', () => { profileImgBinary = {name: 'profileImage', data: reader.result} })\r\n       \r\n        this.setState({ imageArray})\r\n      };\r\n\r\n      convertImagesToFormData =  async () => {\r\n        var formData = new FormData();\r\n        const imageArray = this.state.imageArray;\r\n      \r\n        for (const image of imageArray) {   //await kullanımı için for...of döngüsü\r\n          const canvas = await getCroppedImage(image.data);\r\n          const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\r\n          const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\r\n      \r\n          formData.append(\"annonceImages\", convertedUrltoFile);\r\n          return formData;\r\n        }\r\n       }\r\n\r\n    uploadImagesToServer =  (formData, cb) => {\r\n        instanceAxs.post('/newannonce/imageupload', formData).then(result => {\r\n      \r\n            if (result.data.message === 'images uploaded') {\r\n              var imageLocations = result.data.files.map(e => e.location)\r\n              this.setState({ imageLocations })\r\n              cb(); // run uploadAnnoncesToDb after uploading images\r\n            }\r\n          })\r\n          .catch( err => console.log(err) );\r\n    }\r\n\r\n    getProfileImage = () => {\r\n        instanceAxs.get('/profile/getprofileimg').then(response => {\r\n            console.log(response)\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getProfileImage();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {!this.state.isLoading ? \r\n                <div>\r\n                    <input type=\"file\" name=\"image\" accept=\"image/*\" multiple onChange={this.onImageChange} required></input>\r\n\r\n                </div>\r\n                :\r\n                <p>Loading</p>}\r\n            </div>         \r\n        )\r\n    }\r\n}\r\n\r\nexport default Profile;"]},"metadata":{},"sourceType":"module"}