{"ast":null,"code":"var _jsxFileName = \"/home/tolga/VS Code workspace/Brukth\\xE5nd/secondhand/src/Pages/Profile/Profile/Profile.js\";\nimport './Profile.css';\nimport React from 'react';\nimport { instanceAxs } from '../../../config/api.js';\nimport { getCroppedImage } from '../../../utils/cropImage';\nimport { dataURLtoFile } from '../../../utils/dataURltoFile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.uploadImage = async event => {\n      event.preventDefault();\n      const formData = await this.convertImagesToFormData();\n      this.uploadImagesToServer(formData);\n    };\n    this.onImageChange = async event => {\n      if (!event.target.files) return; //target.files seçilen dosyaları döner\n\n      const file = event.target.files[0];\n      const convertedFile = await this.convertToBase64(file);\n      this.setState({\n        profileImage: convertedFile\n      });\n\n      /*         const imageArray = [];\r\n              Array.from(event.target.files).forEach(file => {\r\n                  const reader = new FileReader();\r\n                  reader.readAsDataURL(file);\r\n                  reader.addEventListener('load', () => imageArray.push({ name: file.name, data: reader.result }))\r\n              })\r\n              this.setState({ imageArray }) */\n    };\n    this.convertImagesToFormData = async () => {\n      // var formData = new FormData();\n      var formData = new FormData();\n      const image = this.state.profileImage;\n      const canvas = await getCroppedImage(image.data);\n      const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n      const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\n      return new Promise(resolve => {\n        formData.append(\"profileImage\", convertedUrltoFile);\n        resolve(formData);\n      });\n      /*         const imageArray = this.state.imageArray;\r\n              for (const image of imageArray) {   //await kullanımı için for...of döngüsü\r\n                const canvas = await getCroppedImage(image.data);\r\n                const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\r\n                const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\r\n            \r\n                formData.append(\"profileImage\", convertedUrltoFile);\r\n                return formData; \r\n              }*/\n    };\n    this.uploadImagesToServer = formData => {\n      instanceAxs.post('/profile/uploadprofileimg', formData).then(result => {\n        if (result.data.message === 'images uploaded') {\n          var imageLocations = result.data.files.map(e => e.location);\n          this.setState({\n            imageLocations\n          });\n        }\n      }).catch(err => console.log(err));\n    };\n    this.convertToBase64 = file => {\n      return new Promise(resolve => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => {\n          resolve({\n            name: file.name,\n            data: reader.result\n          });\n        };\n      });\n    };\n    this.getProfileImage = () => {\n      instanceAxs.get('/profile/getprofileimg').then(response => {\n        console.log(response);\n        this.setState({\n          isLoading: false,\n          profileImgLink: response.data\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n    this.state = {\n      profileImgLink: '',\n      profileImgBinary: 'null',\n      isLoading: false\n    };\n  }\n  componentDidMount() {\n    // this.getProfileImage();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !this.state.isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"http://localhost:3080/profile/getprofileimg?image_name=profilePicture.jpeg\",\n          alt: \"pp\",\n          width: \"300\",\n          height: \"300\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control w-25\",\n          type: \"file\",\n          name: \"image\",\n          accept: \"image/*\",\n          onChange: this.onImageChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: this.uploadImage,\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Profile;","map":{"version":3,"names":["React","instanceAxs","getCroppedImage","dataURLtoFile","Profile","Component","constructor","props","uploadImage","event","preventDefault","formData","convertImagesToFormData","uploadImagesToServer","onImageChange","target","files","file","convertedFile","convertToBase64","setState","profileImage","FormData","image","state","canvas","data","canvasDataUrl","toDataURL","convertedUrltoFile","name","Promise","resolve","append","post","then","result","message","imageLocations","map","e","location","catch","err","console","log","reader","FileReader","readAsDataURL","onload","getProfileImage","get","response","isLoading","profileImgLink","error","profileImgBinary","componentDidMount","render"],"sources":["/home/tolga/VS Code workspace/Brukthånd/secondhand/src/Pages/Profile/Profile/Profile.js"],"sourcesContent":["import './Profile.css';\r\nimport React from 'react';\r\nimport { instanceAxs } from '../../../config/api.js';\r\nimport { getCroppedImage } from '../../../utils/cropImage';\r\nimport { dataURLtoFile } from '../../../utils/dataURltoFile';\r\n\r\nclass Profile extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            profileImgLink: '',\r\n            profileImgBinary: 'null',\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    uploadImage = async (event) => {\r\n        event.preventDefault();\r\n\r\n        const formData = await this.convertImagesToFormData();\r\n        this.uploadImagesToServer(formData);\r\n    }\r\n\r\n    onImageChange = async (event) => {\r\n        if(!event.target.files) return;   //target.files seçilen dosyaları döner\r\n      \r\n        const file = event.target.files[0];\r\n        const convertedFile = await this.convertToBase64(file);\r\n        this.setState({ profileImage: convertedFile });\r\n\r\n/*         const imageArray = [];\r\n        Array.from(event.target.files).forEach(file => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.addEventListener('load', () => imageArray.push({ name: file.name, data: reader.result }))\r\n        })\r\n        this.setState({ imageArray }) */\r\n      };\r\n\r\n      convertImagesToFormData =  async () => {\r\n        // var formData = new FormData();\r\n        var formData = new FormData();\r\n        const image = this.state.profileImage;\r\n        const canvas =  await getCroppedImage(image.data);\r\n        const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\r\n        const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\r\n        return new Promise(resolve => {\r\n     \r\n            formData.append(\"profileImage\", convertedUrltoFile);\r\n            resolve(formData)\r\n        })\r\n/*         const imageArray = this.state.imageArray;\r\n        for (const image of imageArray) {   //await kullanımı için for...of döngüsü\r\n          const canvas = await getCroppedImage(image.data);\r\n          const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\r\n          const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\r\n      \r\n          formData.append(\"profileImage\", convertedUrltoFile);\r\n          return formData; \r\n        }*/\r\n       }\r\n\r\n       uploadImagesToServer =  (formData) => {\r\n        instanceAxs.post('/profile/uploadprofileimg', formData).then(result => {\r\n            if (result.data.message === 'images uploaded') {\r\n              var imageLocations = result.data.files.map(e => e.location)\r\n              this.setState({ imageLocations })\r\n            }\r\n          })\r\n          .catch( err => console.log(err) );\r\n       }\r\n\r\n      convertToBase64 = (file) => {\r\n        return new Promise(resolve => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => {\r\n                resolve({name: file.name, data: reader.result})\r\n            }\r\n        })\r\n      }\r\n\r\n\r\n\r\n    getProfileImage = () => {\r\n        instanceAxs.get('/profile/getprofileimg').then(response => {\r\n            console.log(response)\r\n            this.setState({ isLoading: false, profileImgLink: response.data})\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.getProfileImage();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {!this.state.isLoading ? \r\n                <div className='profileContainer'>\r\n                    <img src='http://localhost:3080/profile/getprofileimg?image_name=profilePicture.jpeg' alt=\"pp\" width=\"300\" height=\"300\"/>\r\n                    <input className='form-control w-25' type=\"file\" name=\"image\" accept=\"image/*\"  onChange={this.onImageChange} required></input>\r\n                    <button className='btn btn-primary' onClick={this.uploadImage}>Upload</button>  \r\n                    <button className='btn btn-danger'>Reset</button>  \r\n                </div>\r\n                :\r\n                <p>Loading</p>}\r\n            </div>         \r\n        )\r\n    }\r\n}\r\n\r\nexport default Profile;"],"mappings":";AAAA,OAAO,eAAe;AACtB,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,aAAa,QAAQ,8BAA8B;AAAC;AAE7D,MAAMC,OAAO,SAASJ,KAAK,CAACK,SAAS,CAAC;EAElCC,WAAW,CAACC,KAAK,EAAC;IACd,KAAK,CAACA,KAAK,CAAC;IAAC,KAQjBC,WAAW,GAAG,MAAOC,KAAK,IAAK;MAC3BA,KAAK,CAACC,cAAc,EAAE;MAEtB,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACC,uBAAuB,EAAE;MACrD,IAAI,CAACC,oBAAoB,CAACF,QAAQ,CAAC;IACvC,CAAC;IAAA,KAEDG,aAAa,GAAG,MAAOL,KAAK,IAAK;MAC7B,IAAG,CAACA,KAAK,CAACM,MAAM,CAACC,KAAK,EAAE,OAAO,CAAG;;MAElC,MAAMC,IAAI,GAAGR,KAAK,CAACM,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,MAAME,aAAa,GAAG,MAAM,IAAI,CAACC,eAAe,CAACF,IAAI,CAAC;MACtD,IAAI,CAACG,QAAQ,CAAC;QAAEC,YAAY,EAAEH;MAAc,CAAC,CAAC;;MAEtD;AACA;AACA;AACA;AACA;AACA;AACA;IACM,CAAC;IAAA,KAEDN,uBAAuB,GAAI,YAAY;MACrC;MACA,IAAID,QAAQ,GAAG,IAAIW,QAAQ,EAAE;MAC7B,MAAMC,KAAK,GAAG,IAAI,CAACC,KAAK,CAACH,YAAY;MACrC,MAAMI,MAAM,GAAI,MAAMvB,eAAe,CAACqB,KAAK,CAACG,IAAI,CAAC;MACjD,MAAMC,aAAa,GAAGF,MAAM,CAACG,SAAS,CAAC,YAAY,CAAC;MACpD,MAAMC,kBAAkB,GAAG1B,aAAa,CAACwB,aAAa,EAAEJ,KAAK,CAACO,IAAI,CAAC;MACnE,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;QAE1BrB,QAAQ,CAACsB,MAAM,CAAC,cAAc,EAAEJ,kBAAkB,CAAC;QACnDG,OAAO,CAACrB,QAAQ,CAAC;MACrB,CAAC,CAAC;MACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACO,CAAC;IAAA,KAEDE,oBAAoB,GAAKF,QAAQ,IAAK;MACrCV,WAAW,CAACiC,IAAI,CAAC,2BAA2B,EAAEvB,QAAQ,CAAC,CAACwB,IAAI,CAACC,MAAM,IAAI;QACnE,IAAIA,MAAM,CAACV,IAAI,CAACW,OAAO,KAAK,iBAAiB,EAAE;UAC7C,IAAIC,cAAc,GAAGF,MAAM,CAACV,IAAI,CAACV,KAAK,CAACuB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,CAAC;UAC3D,IAAI,CAACrB,QAAQ,CAAC;YAAEkB;UAAe,CAAC,CAAC;QACnC;MACF,CAAC,CAAC,CACDI,KAAK,CAAEC,GAAG,IAAIC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAE;IACpC,CAAC;IAAA,KAEFxB,eAAe,GAAIF,IAAI,IAAK;MAC1B,OAAO,IAAIc,OAAO,CAACC,OAAO,IAAI;QAC1B,MAAMc,MAAM,GAAG,IAAIC,UAAU,EAAE;QAC/BD,MAAM,CAACE,aAAa,CAAC/B,IAAI,CAAC;QAC1B6B,MAAM,CAACG,MAAM,GAAG,MAAM;UAClBjB,OAAO,CAAC;YAACF,IAAI,EAAEb,IAAI,CAACa,IAAI;YAAEJ,IAAI,EAAEoB,MAAM,CAACV;UAAM,CAAC,CAAC;QACnD,CAAC;MACL,CAAC,CAAC;IACJ,CAAC;IAAA,KAIHc,eAAe,GAAG,MAAM;MACpBjD,WAAW,CAACkD,GAAG,CAAC,wBAAwB,CAAC,CAAChB,IAAI,CAACiB,QAAQ,IAAI;QACvDR,OAAO,CAACC,GAAG,CAACO,QAAQ,CAAC;QACrB,IAAI,CAAChC,QAAQ,CAAC;UAAEiC,SAAS,EAAE,KAAK;UAAEC,cAAc,EAAEF,QAAQ,CAAC1B;QAAI,CAAC,CAAC;MACrE,CAAC,CAAC,CACDgB,KAAK,CAACa,KAAK,IAAI;QACZX,OAAO,CAACC,GAAG,CAACU,KAAK,CAAC;MACtB,CAAC,CAAC;IACN,CAAC;IAnFG,IAAI,CAAC/B,KAAK,GAAG;MACT8B,cAAc,EAAE,EAAE;MAClBE,gBAAgB,EAAE,MAAM;MACxBH,SAAS,EAAE;IACf,CAAC;EACL;EAgFAI,iBAAiB,GAAG;IAChB;EAAA;EAGJC,MAAM,GAAG;IACL,oBACI;MAAA,UACK,CAAC,IAAI,CAAClC,KAAK,CAAC6B,SAAS,gBACtB;QAAK,SAAS,EAAC,kBAAkB;QAAA,wBAC7B;UAAK,GAAG,EAAC,4EAA4E;UAAC,GAAG,EAAC,IAAI;UAAC,KAAK,EAAC,KAAK;UAAC,MAAM,EAAC;QAAK;UAAA;UAAA;UAAA;QAAA,QAAE,eACzH;UAAO,SAAS,EAAC,mBAAmB;UAAC,IAAI,EAAC,MAAM;UAAC,IAAI,EAAC,OAAO;UAAC,MAAM,EAAC,SAAS;UAAE,QAAQ,EAAE,IAAI,CAACvC,aAAc;UAAC,QAAQ;QAAA;UAAA;UAAA;UAAA;QAAA,QAAS,eAC/H;UAAQ,SAAS,EAAC,iBAAiB;UAAC,OAAO,EAAE,IAAI,CAACN,WAAY;UAAA,UAAC;QAAM;UAAA;UAAA;UAAA;QAAA,QAAS,eAC9E;UAAQ,SAAS,EAAC,gBAAgB;UAAA,UAAC;QAAK;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA;QAAA;QAAA;QAAA;MAAA,QAC/C,gBAEN;QAAA,UAAG;MAAO;QAAA;QAAA;QAAA;MAAA;IAAI;MAAA;MAAA;MAAA;IAAA,QACZ;EAEd;AACJ;AAEA,eAAeJ,OAAO"},"metadata":{},"sourceType":"module"}