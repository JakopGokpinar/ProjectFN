{"ast":null,"code":"var _jsxFileName = \"/home/tolga/VS Code workspace/Brukth\\xE5nd/secondhand/src/Pages/Profile/Profile/Profile.js\";\nimport './Profile.css';\nimport React from 'react';\nimport { instanceAxs } from '../../../config/api.js';\nimport { getCroppedImage } from '../../../utils/cropImage';\nimport { dataURLtoFile } from '../../../utils/dataURltoFile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.uploadImage = async event => {\n      event.preventDefault();\n      const formData = await this.convertImagesToFormData();\n      this.uploadImagesToServer(formData);\n    };\n\n    this.onImageChange = async event => {\n      if (!event.target.files) return; //target.files seçilen dosyaları döner\n\n      const file = event.target.files[0];\n      const convertedFile = await this.convertToBase64(file);\n      this.setState({\n        profileImage: convertedFile\n      });\n      /*         const imageArray = [];\r\n              Array.from(event.target.files).forEach(file => {\r\n                  const reader = new FileReader();\r\n                  reader.readAsDataURL(file);\r\n                  reader.addEventListener('load', () => imageArray.push({ name: file.name, data: reader.result }))\r\n              })\r\n              this.setState({ imageArray }) */\n    };\n\n    this.convertImagesToFormData = async () => {\n      // var formData = new FormData();\n      var formData = new FormData();\n      const image = this.state.profileImage;\n      const canvas = await getCroppedImage(image.data);\n      const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n      const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\n      return new Promise(resolve => {\n        formData.append(\"profileImage\", convertedUrltoFile);\n        resolve(formData);\n      });\n      /*         const imageArray = this.state.imageArray;\r\n              for (const image of imageArray) {   //await kullanımı için for...of döngüsü\r\n                const canvas = await getCroppedImage(image.data);\r\n                const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\r\n                const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\r\n            \r\n                formData.append(\"profileImage\", convertedUrltoFile);\r\n                return formData; \r\n              }*/\n    };\n\n    this.uploadImagesToServer = formData => {\n      instanceAxs.post('/profile/uploadprofileimg', formData).then(result => {\n        return console.log(result);\n\n        if (result.data.message === 'images uploaded') {\n          var imageLocations = result.data.files.map(e => e.location);\n          this.setState({\n            imageLocations\n          });\n        }\n      }).catch(err => console.log(err));\n    };\n\n    this.convertToBase64 = file => {\n      return new Promise(resolve => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n\n        reader.onload = () => {\n          resolve({\n            name: file.name,\n            data: reader.result\n          });\n        };\n      });\n    };\n\n    this.getProfileImage = () => {\n      instanceAxs.get('/profile/getprofileimg').then(response => {\n        console.log(response);\n        this.setState({\n          isLoading: false,\n          profileImgLink: response.data\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      profileImgLink: '',\n      profileImgBinary: 'null',\n      isLoading: false\n    };\n  }\n\n  componentDidMount() {// this.getProfileImage();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !this.state.isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"http://localhost:3080/profile/getprofileimg?image_name=profilePicture.jpeg\",\n          alt: \"pp\",\n          width: \"300\",\n          height: \"300\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"cutom-file-input\",\n          type: \"file\",\n          name: \"image\",\n          accept: \"image/*\",\n          onChange: this.onImageChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.uploadImage,\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Profile;","map":{"version":3,"sources":["/home/tolga/VS Code workspace/Brukthånd/secondhand/src/Pages/Profile/Profile/Profile.js"],"names":["React","instanceAxs","getCroppedImage","dataURLtoFile","Profile","Component","constructor","props","uploadImage","event","preventDefault","formData","convertImagesToFormData","uploadImagesToServer","onImageChange","target","files","file","convertedFile","convertToBase64","setState","profileImage","FormData","image","state","canvas","data","canvasDataUrl","toDataURL","convertedUrltoFile","name","Promise","resolve","append","post","then","result","console","log","message","imageLocations","map","e","location","catch","err","reader","FileReader","readAsDataURL","onload","getProfileImage","get","response","isLoading","profileImgLink","error","profileImgBinary","componentDidMount","render"],"mappings":"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","sourcesContent":["import './Profile.css';\r\nimport React from 'react';\r\nimport { instanceAxs } from '../../../config/api.js';\r\nimport { getCroppedImage } from '../../../utils/cropImage';\r\nimport { dataURLtoFile } from '../../../utils/dataURltoFile';\r\n\r\nclass Profile extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            profileImgLink: '',\r\n            profileImgBinary: 'null',\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    uploadImage = async (event) => {\r\n        event.preventDefault();\r\n\r\n        const formData = await this.convertImagesToFormData();\r\n        this.uploadImagesToServer(formData);\r\n    }\r\n\r\n    onImageChange = async (event) => {\r\n        if(!event.target.files) return;   //target.files seçilen dosyaları döner\r\n      \r\n        const file = event.target.files[0];\r\n        const convertedFile = await this.convertToBase64(file);\r\n        this.setState({ profileImage: convertedFile });\r\n\r\n/*         const imageArray = [];\r\n        Array.from(event.target.files).forEach(file => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.addEventListener('load', () => imageArray.push({ name: file.name, data: reader.result }))\r\n        })\r\n        this.setState({ imageArray }) */\r\n      };\r\n\r\n      convertImagesToFormData =  async () => {\r\n        // var formData = new FormData();\r\n        var formData = new FormData();\r\n        const image = this.state.profileImage;\r\n        const canvas =  await getCroppedImage(image.data);\r\n        const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\r\n        const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\r\n        return new Promise(resolve => {\r\n     \r\n            formData.append(\"profileImage\", convertedUrltoFile);\r\n            resolve(formData)\r\n        })\r\n/*         const imageArray = this.state.imageArray;\r\n        for (const image of imageArray) {   //await kullanımı için for...of döngüsü\r\n          const canvas = await getCroppedImage(image.data);\r\n          const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\r\n          const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\r\n      \r\n          formData.append(\"profileImage\", convertedUrltoFile);\r\n          return formData; \r\n        }*/\r\n       }\r\n\r\n       uploadImagesToServer =  (formData) => {\r\n        instanceAxs.post('/profile/uploadprofileimg', formData).then(result => {\r\n            return console.log(result)\r\n            if (result.data.message === 'images uploaded') {\r\n              var imageLocations = result.data.files.map(e => e.location)\r\n              this.setState({ imageLocations })\r\n            }\r\n          })\r\n          .catch( err => console.log(err) );\r\n       }\r\n\r\n      convertToBase64 = (file) => {\r\n        return new Promise(resolve => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => {\r\n                resolve({name: file.name, data: reader.result})\r\n            }\r\n        })\r\n      }\r\n\r\n\r\n\r\n    getProfileImage = () => {\r\n        instanceAxs.get('/profile/getprofileimg').then(response => {\r\n            console.log(response)\r\n            this.setState({ isLoading: false, profileImgLink: response.data})\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.getProfileImage();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {!this.state.isLoading ? \r\n                <div className='profileContainer'>\r\n                    <img src='http://localhost:3080/profile/getprofileimg?image_name=profilePicture.jpeg' alt=\"pp\" width=\"300\" height=\"300\"/>\r\n\r\n                    <input className='cutom-file-input' type=\"file\" name=\"image\" accept=\"image/*\"  onChange={this.onImageChange} required></input>\r\n                    <button onClick={this.uploadImage}>Upload</button>  \r\n                    <button className='btn btn-'>Reset</button>  \r\n                </div>\r\n                :\r\n                <p>Loading</p>}\r\n            </div>         \r\n        )\r\n    }\r\n}\r\n\r\nexport default Profile;"]},"metadata":{},"sourceType":"module"}