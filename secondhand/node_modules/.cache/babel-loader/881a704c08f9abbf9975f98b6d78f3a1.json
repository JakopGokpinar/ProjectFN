{"ast":null,"code":"var _jsxFileName = \"/home/tolga/VS Code workspace/Brukth\\xE5nd/secondhand/src/Pages/NewAnnonce/NewAnnonce.js\";\nimport React from \"react\";\nimport \"./NewAnnonce.css\";\nimport { getCroppedImage } from \"../../utils/cropImage\";\nimport { dataURLtoFile } from \"../../utils/dataURltoFile\";\nimport { instanceAxs } from \"../../config/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewAnnonce extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.submitAnnonce = event => {\n      event.preventDefault();\n      this.convertImagesToFormData();\n    };\n\n    this.onImageChange = event => {\n      if (!event.target.files) return; //target.files seçilen dosyaları döner\n\n      const imageArray = []; // create an array to store readable data of images\n      // Array.from() target.files'ı iterable bir array'e dönüştürür\n\n      Array.from(event.target.files).forEach(file => {\n        var reader = new FileReader(); //Yüklenen resmin datasını oku.\n\n        reader.readAsDataURL(file);\n        reader.addEventListener('load', () => {\n          imageArray.push({\n            name: file.name,\n            data: reader.result\n          });\n        });\n      });\n      this.setState({\n        imageArray\n      });\n    };\n\n    this.convertImagesToFormData = async () => {\n      var formData = new FormData();\n      const imageArray = this.state.imageArray;\n      imageArray.forEach(async img => {\n        const canvas = await getCroppedImage(img.data);\n        const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n        const convertedUrltoFile = dataURLtoFile(canvasDataUrl, img.name);\n        formData.append(\"annonceImages\", convertedUrltoFile);\n        return formData;\n      });\n    };\n\n    this.uploadImagesToServer = formData => {\n      instanceAxs.post('/newannonce/imageupload', formData).then(result => {\n        console.log(result);\n        var imageLocations = result.data.files.map(e => e.location);\n        setImageLocations(imageLocations);\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.state = {};\n    this.submitAnnonce = this.submitAnnonce.bind(this);\n    this.onImageChange = this.onImageChange.bind(this);\n    this.convertImagesToFormData = this.convertImagesToFormData.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"annonceFormDiv\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"annonce-form\",\n        onSubmit: this.submitAnnonce,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Tittel\",\n          name: \"title\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Price\",\n          name: \"price\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          accept: \"image/*\",\n          multiple: true,\n          onChange: this.onImageChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Publish\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default NewAnnonce;","map":{"version":3,"sources":["/home/tolga/VS Code workspace/Brukthånd/secondhand/src/Pages/NewAnnonce/NewAnnonce.js"],"names":["React","getCroppedImage","dataURLtoFile","instanceAxs","NewAnnonce","Component","constructor","props","submitAnnonce","event","preventDefault","convertImagesToFormData","onImageChange","target","files","imageArray","Array","from","forEach","file","reader","FileReader","readAsDataURL","addEventListener","push","name","data","result","setState","formData","FormData","state","img","canvas","canvasDataUrl","toDataURL","convertedUrltoFile","append","uploadImagesToServer","post","then","console","log","imageLocations","map","e","location","setImageLocations","catch","err","bind","render"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport \"./NewAnnonce.css\";\nimport { getCroppedImage } from \"../../utils/cropImage\";\nimport { dataURLtoFile } from \"../../utils/dataURltoFile\";\nimport { instanceAxs } from \"../../config/api\";\n\nclass NewAnnonce extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        \n    }\n    this.submitAnnonce = this.submitAnnonce.bind(this);\n    this.onImageChange = this.onImageChange.bind(this);\n    this.convertImagesToFormData = this.convertImagesToFormData.bind(this);\n} \n\nsubmitAnnonce = (event) => {\n  event.preventDefault();\n  this.convertImagesToFormData();\n}\n\n onImageChange = (event) => {\n  if(!event.target.files) return;   //target.files seçilen dosyaları döner\n\n  const imageArray = [];  // create an array to store readable data of images\n  // Array.from() target.files'ı iterable bir array'e dönüştürür\n  Array.from(event.target.files).forEach(file => { \n    var reader = new FileReader();  //Yüklenen resmin datasını oku.\n    reader.readAsDataURL(file);\n    reader.addEventListener('load', () => { imageArray.push({name: file.name, data: reader.result})})\n  })  \n \n  this.setState({ imageArray})\n};\n\n\n convertImagesToFormData =  async () => {\n  var formData = new FormData();\n  const imageArray = this.state.imageArray;\n\n  imageArray.forEach(async (img) => {\n    const canvas = await getCroppedImage(img.data);\n    const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n    const convertedUrltoFile = dataURLtoFile(canvasDataUrl, img.name);\n\n    formData.append(\"annonceImages\", convertedUrltoFile);\n\n    return formData;\n  })\n }\n\n\n uploadImagesToServer = (formData) => {\n  instanceAxs.post('/newannonce/imageupload', formData)\n    .then(result => {\n      console.log(result)\n      var imageLocations = result.data.files.map(e => e.location)\n      setImageLocations(imageLocations);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n }\n\n\n  render() {\n    return (\n      <div className=\"annonceFormDiv\">\n        <form id=\"annonce-form\" onSubmit={this.submitAnnonce}>\n          <input type=\"text\" placeholder=\"Tittel\" name=\"title\" required></input>\n          <input type=\"text\" placeholder=\"Price\" name=\"price\" required></input>\n          <input type=\"file\" name=\"image\" accept=\"image/*\" multiple onChange={this.onImageChange}></input>\n          <button type=\"submit\">Publish</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default NewAnnonce;\n"]},"metadata":{},"sourceType":"module"}