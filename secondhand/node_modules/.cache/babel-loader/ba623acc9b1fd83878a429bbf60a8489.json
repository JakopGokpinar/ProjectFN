{"ast":null,"code":"var _jsxFileName = \"/home/tolga/VS Code workspace/Brukth\\xE5nd/secondhand/src/Pages/Profile/Profile/Profile.js\";\nimport './Profile.css';\nimport React from 'react';\nimport { instanceAxs } from '../../../config/api.js';\nimport { getCroppedImage } from '../../../utils/cropImage';\nimport { dataURLtoFile } from '../../../utils/dataURltoFile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.uploadImage = async event => {\n      event.preventDefault();\n      const formData = await this.convertImagesToFormData();\n      this.uploadImagesToServer(formData);\n    };\n\n    this.onImageChange = async event => {\n      if (!event.target.files) return; //target.files seçilen dosyaları döner\n\n      const imageArray = [];\n      Array.from(event.target.files).forEach(file => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.addEventListener('load', () => imageArray.push({\n          name: file.name,\n          data: reader.result\n        }));\n      });\n      this.setState({\n        imageArray\n      });\n    };\n\n    this.convertToBase64 = file => {\n      return new Promise(resolse => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n\n        reader.onload = () => {\n          resolse(reader.result);\n        };\n      });\n    };\n\n    this.getProfileImage = () => {\n      instanceAxs.get('/profile/getprofileimg?image_name=profilePicture.jpeg').then(response => {\n        console.log(response);\n        this.setState({\n          isLoading: false,\n          profileImgLink: response.data\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      profileImgLink: '',\n      profileImgBinary: 'null',\n      isLoading: false\n    };\n  }\n\n  componentDidMount() {// this.getProfileImage();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !this.state.isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          accept: \"image/*\",\n          onChange: this.onImageChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.uploadImage,\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.convertImagesToFormData,\n          children: \"Show\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"http://localhost:3080/profile/getprofileimg?image_name=profilePicture.jpeg\",\n          alt: \"pp\",\n          width: \"500\",\n          height: \"600\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Profile;","map":{"version":3,"sources":["/home/tolga/VS Code workspace/Brukthånd/secondhand/src/Pages/Profile/Profile/Profile.js"],"names":["React","instanceAxs","getCroppedImage","dataURLtoFile","Profile","Component","constructor","props","uploadImage","event","preventDefault","formData","convertImagesToFormData","uploadImagesToServer","onImageChange","target","files","imageArray","Array","from","forEach","file","reader","FileReader","readAsDataURL","addEventListener","push","name","data","result","setState","convertToBase64","Promise","resolse","onload","getProfileImage","get","then","response","console","log","isLoading","profileImgLink","catch","error","state","profileImgBinary","componentDidMount","render"],"mappings":";AAAA,OAAO,eAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,aAAT,QAA8B,8BAA9B;;;AAEA,MAAMC,OAAN,SAAsBJ,KAAK,CAACK,SAA5B,CAAsC;AAElCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SASlBC,WATkB,GASJ,MAAOC,KAAP,IAAiB;AAC3BA,MAAAA,KAAK,CAACC,cAAN;AACA,YAAMC,QAAQ,GAAG,MAAM,KAAKC,uBAAL,EAAvB;AACA,WAAKC,oBAAL,CAA0BF,QAA1B;AACH,KAbiB;;AAAA,SAelBG,aAfkB,GAeF,MAAOL,KAAP,IAAiB;AAC7B,UAAG,CAACA,KAAK,CAACM,MAAN,CAAaC,KAAjB,EAAwB,OADK,CACK;;AAElC,YAAMC,UAAU,GAAG,EAAnB;AACAC,MAAAA,KAAK,CAACC,IAAN,CAAWV,KAAK,CAACM,MAAN,CAAaC,KAAxB,EAA+BI,OAA/B,CAAuCC,IAAI,IAAI;AAC3C,cAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,QAAAA,MAAM,CAACE,aAAP,CAAqBH,IAArB;AACAC,QAAAA,MAAM,CAACG,gBAAP,CAAwB,MAAxB,EAAgC,MAAMR,UAAU,CAACS,IAAX,CAAgB;AAAEC,UAAAA,IAAI,EAAEN,IAAI,CAACM,IAAb;AAAmBC,UAAAA,IAAI,EAAEN,MAAM,CAACO;AAAhC,SAAhB,CAAtC;AACH,OAJD;AAKA,WAAKC,QAAL,CAAc;AAAEb,QAAAA;AAAF,OAAd;AACD,KAzBe;;AAAA,SA2BhBc,eA3BgB,GA2BGV,IAAD,IAAU;AAC1B,aAAO,IAAIW,OAAJ,CAAYC,OAAO,IAAI;AAC1B,cAAMX,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,QAAAA,MAAM,CAACE,aAAP,CAAqBH,IAArB;;AACAC,QAAAA,MAAM,CAACY,MAAP,GAAgB,MAAM;AAClBD,UAAAA,OAAO,CAACX,MAAM,CAACO,MAAR,CAAP;AACH,SAFD;AAGH,OANM,CAAP;AAOD,KAnCe;;AAAA,SAuClBM,eAvCkB,GAuCA,MAAM;AACpBlC,MAAAA,WAAW,CAACmC,GAAZ,CAAgB,uDAAhB,EAAyEC,IAAzE,CAA8EC,QAAQ,IAAI;AACtFC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,aAAKR,QAAL,CAAc;AAAEW,UAAAA,SAAS,EAAE,KAAb;AAAoBC,UAAAA,cAAc,EAAEJ,QAAQ,CAACV;AAA7C,SAAd;AACH,OAHD,EAICe,KAJD,CAIOC,KAAK,IAAI;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACH,OAND;AAOH,KA/CiB;;AAEd,SAAKC,KAAL,GAAa;AACTH,MAAAA,cAAc,EAAE,EADP;AAETI,MAAAA,gBAAgB,EAAE,MAFT;AAGTL,MAAAA,SAAS,EAAE;AAHF,KAAb;AAKH;;AA0CDM,EAAAA,iBAAiB,GAAG,CAChB;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,gBACK,CAAC,KAAKH,KAAL,CAAWJ,SAAZ,gBACD;AAAA,gCACI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,IAAI,EAAC,OAAxB;AAAgC,UAAA,MAAM,EAAC,SAAvC;AAAkD,UAAA,QAAQ,EAAE,KAAK3B,aAAjE;AAAgF,UAAA,QAAQ;AAAxF;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,OAAO,EAAE,KAAKN,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAQ,UAAA,OAAO,EAAE,KAAKI,uBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAK,UAAA,GAAG,EAAC,4EAAT;AAAsF,UAAA,GAAG,EAAC,IAA1F;AAA+F,UAAA,KAAK,EAAC,KAArG;AAA2G,UAAA,MAAM,EAAC;AAAlH;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADC,gBAQD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAaH;;AArEiC;;AAwEtC,eAAeR,OAAf","sourcesContent":["import './Profile.css';\r\nimport React from 'react';\r\nimport { instanceAxs } from '../../../config/api.js';\r\nimport { getCroppedImage } from '../../../utils/cropImage';\r\nimport { dataURLtoFile } from '../../../utils/dataURltoFile';\r\n\r\nclass Profile extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            profileImgLink: '',\r\n            profileImgBinary: 'null',\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    uploadImage = async (event) => {\r\n        event.preventDefault()\r\n        const formData = await this.convertImagesToFormData();\r\n        this.uploadImagesToServer(formData);\r\n    }\r\n\r\n    onImageChange = async (event) => {\r\n        if(!event.target.files) return;   //target.files seçilen dosyaları döner\r\n      \r\n        const imageArray = [];\r\n        Array.from(event.target.files).forEach(file => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.addEventListener('load', () => imageArray.push({ name: file.name, data: reader.result }))\r\n        })\r\n        this.setState({ imageArray })\r\n      };\r\n\r\n      convertToBase64 = (file) => {\r\n        return new Promise(resolse => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => {\r\n                resolse(reader.result)\r\n            }\r\n        })\r\n      }\r\n\r\n\r\n\r\n    getProfileImage = () => {\r\n        instanceAxs.get('/profile/getprofileimg?image_name=profilePicture.jpeg').then(response => {\r\n            console.log(response)\r\n            this.setState({ isLoading: false, profileImgLink: response.data})\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.getProfileImage();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {!this.state.isLoading ? \r\n                <div>\r\n                    <input type=\"file\" name=\"image\" accept=\"image/*\"  onChange={this.onImageChange} required></input>\r\n                    <button onClick={this.uploadImage}>Upload</button>  \r\n                    <button onClick={this.convertImagesToFormData}>Show</button>  \r\n                    <img src='http://localhost:3080/profile/getprofileimg?image_name=profilePicture.jpeg' alt=\"pp\" width=\"500\" height=\"600\"/>\r\n                </div>\r\n                :\r\n                <p>Loading</p>}\r\n            </div>         \r\n        )\r\n    }\r\n}\r\n\r\nexport default Profile;"]},"metadata":{},"sourceType":"module"}