{"ast":null,"code":"var _jsxFileName = \"/home/tolga/VS Code workspace/Brukth\\xE5nd/secondhand/src/Pages/NewAnnonce/NewAnnonce.js\";\nimport React from \"react\";\nimport \"./NewAnnonce.css\";\nimport { getCroppedImage } from \"../../utils/cropImage\";\nimport { dataURLtoFile } from \"../../utils/dataURltoFile\";\nimport { instanceAxs } from \"../../config/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewAnnonce extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.submitAnnonce = async event => {\n      event.preventDefault();\n      const formData = await this.convertImagesToFormData();\n      console.log('form data', formData);\n      await this.uploadImagesToServer(formData);\n    };\n\n    this.onImageChange = event => {\n      if (!event.target.files) return; //target.files seçilen dosyaları döner\n\n      const imageArray = []; // create an array to store readable data of images\n      // Array.from() target.files'ı iterable bir array'e dönüştürür\n\n      Array.from(event.target.files).forEach(file => {\n        var reader = new FileReader(); //Yüklenen resmin datasını oku.\n\n        reader.readAsDataURL(file);\n        reader.addEventListener('load', () => {\n          imageArray.push({\n            name: file.name,\n            data: reader.result\n          });\n        });\n      });\n      this.setState({\n        imageArray\n      });\n\n      if (event.target.files && event.target.files.length > 0) {\n        var imgArr = [];\n\n        for (var i = 0; i < event.target.files.length; i++) {\n          let reader = new FileReader();\n          console.log('file name', event.target.files[i].name);\n          reader.readAsDataURL(event.target.files[i]);\n          reader.addEventListener('load', () => {\n            imgArr.push(reader.result);\n          });\n        }\n\n        this.setState({\n          imageArray: imgArr\n        });\n      }\n    };\n\n    this.convertImagesToFormData = async () => {\n      /*   var formData = new FormData();\n        const imageArray = this.state.imageArray;\n      \n        imageArray.forEach(async (img) => {\n          const canvas = await getCroppedImage(img.data);\n          const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n          const convertedUrltoFile = dataURLtoFile(canvasDataUrl, img.name);\n      \n          formData.append(\"annonceImages\", convertedUrltoFile);\n        })\n      \n        return formData; */\n      var selectedFiles = this.state.imageArray;\n      var formData = new FormData();\n\n      for (let i = 0; i < selectedFiles.length; i++) {\n        var img = selectedFiles[i];\n        const canvas = await getCroppedImage(img);\n        const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n        const convertedUrltoFile = dataURLtoFile(canvasDataUrl, `${Date.now()}-myimage.jpg`);\n        console.log(convertedUrltoFile);\n        formData.append(\"annonceImages\", convertedUrltoFile);\n        return formData;\n      }\n    };\n\n    this.uploadImagesToServer = async formData => {\n      console.log(formData);\n      instanceAxs.post('/newannonce/imageupload', formData).then(result => {\n        console.log(result);\n        const resultData = result.data;\n\n        if (resultData.message = 'images uploaded') {\n          /* var imageLocations = resultData.files.map(e => e.location)\n          this.setState({ imageLocations }) */\n          console.log('sa');\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.state = {\n      imageArray: [],\n      imageLocations: []\n    };\n    this.submitAnnonce = this.submitAnnonce.bind(this);\n    this.onImageChange = this.onImageChange.bind(this);\n    this.convertImagesToFormData = this.convertImagesToFormData.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"annonceFormDiv\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"annonce-form\",\n        onSubmit: this.submitAnnonce,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Tittel\",\n          name: \"title\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Price\",\n          name: \"price\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          accept: \"image/*\",\n          multiple: true,\n          onChange: this.onImageChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Publish\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default NewAnnonce;","map":{"version":3,"sources":["/home/tolga/VS Code workspace/Brukthånd/secondhand/src/Pages/NewAnnonce/NewAnnonce.js"],"names":["React","getCroppedImage","dataURLtoFile","instanceAxs","NewAnnonce","Component","constructor","props","submitAnnonce","event","preventDefault","formData","convertImagesToFormData","console","log","uploadImagesToServer","onImageChange","target","files","imageArray","Array","from","forEach","file","reader","FileReader","readAsDataURL","addEventListener","push","name","data","result","setState","length","imgArr","i","selectedFiles","state","FormData","img","canvas","canvasDataUrl","toDataURL","convertedUrltoFile","Date","now","append","post","then","resultData","message","catch","err","imageLocations","bind","render"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport \"./NewAnnonce.css\";\nimport { getCroppedImage } from \"../../utils/cropImage\";\nimport { dataURLtoFile } from \"../../utils/dataURltoFile\";\nimport { instanceAxs } from \"../../config/api\";\n\nclass NewAnnonce extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        imageArray: [],\n        imageLocations: []\n    }\n    this.submitAnnonce = this.submitAnnonce.bind(this);\n    this.onImageChange = this.onImageChange.bind(this);\n    this.convertImagesToFormData = this.convertImagesToFormData.bind(this);\n} \n\nsubmitAnnonce = async (event) => {\n  event.preventDefault();\n  const formData = await this.convertImagesToFormData();\n  console.log('form data', formData)\n  await this.uploadImagesToServer(formData)\n}\n\n onImageChange = (event) => {\n  if(!event.target.files) return;   //target.files seçilen dosyaları döner\n\n  const imageArray = [];  // create an array to store readable data of images\n  // Array.from() target.files'ı iterable bir array'e dönüştürür\n  Array.from(event.target.files).forEach(file => { \n    var reader = new FileReader();  //Yüklenen resmin datasını oku.\n    reader.readAsDataURL(file);\n    reader.addEventListener('load', () => { imageArray.push({name: file.name, data: reader.result})})\n  })  \n \n  this.setState({ imageArray})\n  if(event.target.files && event.target.files.length > 0){\n    var imgArr = [];\n    for (var i = 0; i < event.target.files.length; i++){\n        let reader = new FileReader();\n        console.log('file name', event.target.files[i].name)\n        reader.readAsDataURL(event.target.files[i]);\n        reader.addEventListener('load', () => {\n            imgArr.push(reader.result);\n        })\n    }\n    this.setState({imageArray: imgArr});\n}\n};\n\n\n convertImagesToFormData =  async () => {\n/*   var formData = new FormData();\n  const imageArray = this.state.imageArray;\n\n  imageArray.forEach(async (img) => {\n    const canvas = await getCroppedImage(img.data);\n    const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n    const convertedUrltoFile = dataURLtoFile(canvasDataUrl, img.name);\n\n    formData.append(\"annonceImages\", convertedUrltoFile);\n  })\n\n  return formData; */\n  var selectedFiles = this.state.imageArray;\n  var formData = new FormData();\n\n  for (let i = 0; i < selectedFiles.length; i++) {\n    var img = selectedFiles[i];\n    const canvas = await getCroppedImage(img);\n    const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n    \n    const convertedUrltoFile = dataURLtoFile(\n      canvasDataUrl,\n      `${Date.now()}-myimage.jpg`\n    );\n    console.log(convertedUrltoFile);\n\n    formData.append(\"annonceImages\", convertedUrltoFile);\n    return formData;\n  }  \n }\n\n\n uploadImagesToServer = async (formData) => {\n  console.log(formData)\n  instanceAxs.post('/newannonce/imageupload', formData)\n    .then(result => {\n      console.log(result)\n      const resultData = result.data;\n      if (resultData.message = 'images uploaded') {\n        /* var imageLocations = resultData.files.map(e => e.location)\n        this.setState({ imageLocations }) */\n        console.log('sa')\n      }\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n }\n\n\n  render() {\n    return (\n      <div className=\"annonceFormDiv\">\n        <form id=\"annonce-form\" onSubmit={this.submitAnnonce}>\n          <input type=\"text\" placeholder=\"Tittel\" name=\"title\" required></input>\n          <input type=\"text\" placeholder=\"Price\" name=\"price\" required></input>\n          <input type=\"file\" name=\"image\" accept=\"image/*\" multiple onChange={this.onImageChange} required></input>\n          <button type=\"submit\">Publish</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default NewAnnonce;\n"]},"metadata":{},"sourceType":"module"}