{"ast":null,"code":"var _jsxFileName = \"/home/tolga/VS Code workspace/Brukth\\xE5nd/secondhand/src/Pages/Profile/Profile/Profile.js\";\nimport './Profile.css';\nimport React from 'react';\nimport { instanceAxs } from '../../../config/api.js';\nimport { getCroppedImage } from '../../../utils/cropImage';\nimport { dataURLtoFile } from '../../../utils/dataURltoFile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.uploadImage = async () => {\n      const formData = await this.convertImagesToFormData();\n      this.uploadImagesToServer(formData, this.uploadAnnonceToServer);\n    };\n\n    this.onImageChange = event => {\n      if (!event.target.files) return; //target.files seçilen dosyaları döner\n\n      const file = event.target.files[0];\n      var profileImgBinary = null;\n      var reader = new FileReader(); //Yüklenen resmin datasını oku.\n\n      reader.readAsDataURL(file);\n      reader.addEventListener('load', () => {\n        profileImgBinary = {\n          name: 'profilePicture',\n          data: reader.result\n        };\n      });\n      this.setState({\n        profileImgBinary\n      });\n    };\n\n    this.convertImagesToFormData = async () => {\n      var formData = new FormData();\n      const image = this.state.profileImgBinary;\n      const canvas = await getCroppedImage(image.data);\n      const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n      const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\n      formData.append(\"profileImage\", convertedUrltoFile);\n      return formData;\n    };\n\n    this.uploadImagesToServer = (formData, cb) => {\n      instanceAxs.post('/newannonce/imageupload', formData).then(result => {\n        return console.log(result);\n\n        if (result.data.message === 'images uploaded') {\n          var imageLocations = result.data.files.map(e => e.location);\n          this.setState({\n            imageLocations\n          });\n          cb(); // run uploadAnnoncesToDb after uploading images\n        }\n      }).catch(err => console.log(err));\n    };\n\n    this.getProfileImage = () => {\n      instanceAxs.get('/profile/getprofileimg?imageid=a@a/enebolig.jpeg').then(response => {\n        console.log(response);\n        this.setState({\n          isLoading: false\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      profileImgLink: '',\n      profileImgBinary: '',\n      isLoading: true\n    };\n  }\n\n  componentDidMount() {\n    this.getProfileImage();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !this.state.isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          accept: \"image/*\",\n          multiple: true,\n          onChange: this.onImageChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.uploadImage,\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Profile;","map":{"version":3,"sources":["/home/tolga/VS Code workspace/Brukthånd/secondhand/src/Pages/Profile/Profile/Profile.js"],"names":["React","instanceAxs","getCroppedImage","dataURLtoFile","Profile","Component","constructor","props","uploadImage","formData","convertImagesToFormData","uploadImagesToServer","uploadAnnonceToServer","onImageChange","event","target","files","file","profileImgBinary","reader","FileReader","readAsDataURL","addEventListener","name","data","result","setState","FormData","image","state","canvas","canvasDataUrl","toDataURL","convertedUrltoFile","append","cb","post","then","console","log","message","imageLocations","map","e","location","catch","err","getProfileImage","get","response","isLoading","error","profileImgLink","componentDidMount","render"],"mappings":";AAAA,OAAO,eAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,aAAT,QAA8B,8BAA9B;;;AAEA,MAAMC,OAAN,SAAsBJ,KAAK,CAACK,SAA5B,CAAsC;AAElCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SASlBC,WATkB,GASJ,YAAY;AACtB,YAAMC,QAAQ,GAAG,MAAM,KAAKC,uBAAL,EAAvB;AACA,WAAKC,oBAAL,CAA0BF,QAA1B,EAAoC,KAAKG,qBAAzC;AACH,KAZiB;;AAAA,SAclBC,aAdkB,GAcDC,KAAD,IAAW;AACvB,UAAG,CAACA,KAAK,CAACC,MAAN,CAAaC,KAAjB,EAAwB,OADD,CACW;;AAElC,YAAMC,IAAI,GAAGH,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAb;AACA,UAAIE,gBAAgB,GAAG,IAAvB;AAEE,UAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb,CANqB,CAMW;;AAChCD,MAAAA,MAAM,CAACE,aAAP,CAAqBJ,IAArB;AACAE,MAAAA,MAAM,CAACG,gBAAP,CAAwB,MAAxB,EAAgC,MAAM;AAAEJ,QAAAA,gBAAgB,GAAG;AAACK,UAAAA,IAAI,EAAE,gBAAP;AAAyBC,UAAAA,IAAI,EAAEL,MAAM,CAACM;AAAtC,SAAnB;AAAkE,OAA1G;AAEF,WAAKC,QAAL,CAAc;AAAER,QAAAA;AAAF,OAAd;AACD,KAzBe;;AAAA,SA2BhBR,uBA3BgB,GA2BW,YAAY;AACrC,UAAID,QAAQ,GAAG,IAAIkB,QAAJ,EAAf;AACA,YAAMC,KAAK,GAAG,KAAKC,KAAL,CAAWX,gBAAzB;AAEE,YAAMY,MAAM,GAAG,MAAM5B,eAAe,CAAC0B,KAAK,CAACJ,IAAP,CAApC;AACA,YAAMO,aAAa,GAAGD,MAAM,CAACE,SAAP,CAAiB,YAAjB,CAAtB;AACA,YAAMC,kBAAkB,GAAG9B,aAAa,CAAC4B,aAAD,EAAgBH,KAAK,CAACL,IAAtB,CAAxC;AAEAd,MAAAA,QAAQ,CAACyB,MAAT,CAAgB,cAAhB,EAAgCD,kBAAhC;AACA,aAAOxB,QAAP;AACF,KArCc;;AAAA,SAuClBE,oBAvCkB,GAuCM,CAACF,QAAD,EAAW0B,EAAX,KAAkB;AACtClC,MAAAA,WAAW,CAACmC,IAAZ,CAAiB,yBAAjB,EAA4C3B,QAA5C,EAAsD4B,IAAtD,CAA2DZ,MAAM,IAAI;AACjE,eAAOa,OAAO,CAACC,GAAR,CAAYd,MAAZ,CAAP;;AACA,YAAIA,MAAM,CAACD,IAAP,CAAYgB,OAAZ,KAAwB,iBAA5B,EAA+C;AAC7C,cAAIC,cAAc,GAAGhB,MAAM,CAACD,IAAP,CAAYR,KAAZ,CAAkB0B,GAAlB,CAAsBC,CAAC,IAAIA,CAAC,CAACC,QAA7B,CAArB;AACA,eAAKlB,QAAL,CAAc;AAAEe,YAAAA;AAAF,WAAd;AACAN,UAAAA,EAAE,GAH2C,CAGvC;AACP;AACF,OAPH,EAQGU,KARH,CAQUC,GAAG,IAAIR,OAAO,CAACC,GAAR,CAAYO,GAAZ,CARjB;AASH,KAjDiB;;AAAA,SAmDlBC,eAnDkB,GAmDA,MAAM;AACpB9C,MAAAA,WAAW,CAAC+C,GAAZ,CAAgB,kDAAhB,EAAoEX,IAApE,CAAyEY,QAAQ,IAAI;AACjFX,QAAAA,OAAO,CAACC,GAAR,CAAYU,QAAZ;AACA,aAAKvB,QAAL,CAAc;AAAEwB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACH,OAHD,EAICL,KAJD,CAIOM,KAAK,IAAI;AACZb,QAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACH,OAND;AAOH,KA3DiB;;AAEd,SAAKtB,KAAL,GAAa;AACTuB,MAAAA,cAAc,EAAE,EADP;AAETlC,MAAAA,gBAAgB,EAAE,EAFT;AAGTgC,MAAAA,SAAS,EAAE;AAHF,KAAb;AAKH;;AAsDDG,EAAAA,iBAAiB,GAAG;AAChB,SAAKN,eAAL;AACH;;AAEDO,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,gBACK,CAAC,KAAKzB,KAAL,CAAWqB,SAAZ,gBACD;AAAA,gCACI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,IAAI,EAAC,OAAxB;AAAgC,UAAA,MAAM,EAAC,SAAvC;AAAiD,UAAA,QAAQ,MAAzD;AAA0D,UAAA,QAAQ,EAAE,KAAKrC,aAAzE;AAAwF,UAAA,QAAQ;AAAhG;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,OAAO,EAAE,KAAKL,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADC,gBAMD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AA/EiC;;AAkFtC,eAAeJ,OAAf","sourcesContent":["import './Profile.css';\r\nimport React from 'react';\r\nimport { instanceAxs } from '../../../config/api.js';\r\nimport { getCroppedImage } from '../../../utils/cropImage';\r\nimport { dataURLtoFile } from '../../../utils/dataURltoFile';\r\n\r\nclass Profile extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            profileImgLink: '',\r\n            profileImgBinary: '',\r\n            isLoading: true\r\n        }\r\n    }\r\n\r\n    uploadImage = async () => {\r\n        const formData = await this.convertImagesToFormData();\r\n        this.uploadImagesToServer(formData, this.uploadAnnonceToServer);\r\n    }\r\n\r\n    onImageChange = (event) => {\r\n        if(!event.target.files) return;   //target.files seçilen dosyaları döner\r\n      \r\n        const file = event.target.files[0];\r\n        var profileImgBinary = null;\r\n\r\n          var reader = new FileReader();  //Yüklenen resmin datasını oku.\r\n          reader.readAsDataURL(file);\r\n          reader.addEventListener('load', () => { profileImgBinary = {name: 'profilePicture', data: reader.result} })\r\n       \r\n        this.setState({ profileImgBinary })\r\n      };\r\n\r\n      convertImagesToFormData =  async () => {\r\n        var formData = new FormData();\r\n        const image = this.state.profileImgBinary;\r\n      \r\n          const canvas = await getCroppedImage(image.data);\r\n          const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\r\n          const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\r\n      \r\n          formData.append(\"profileImage\", convertedUrltoFile);\r\n          return formData;     \r\n       }\r\n\r\n    uploadImagesToServer =  (formData, cb) => {\r\n        instanceAxs.post('/newannonce/imageupload', formData).then(result => {\r\n            return console.log(result)\r\n            if (result.data.message === 'images uploaded') {\r\n              var imageLocations = result.data.files.map(e => e.location)\r\n              this.setState({ imageLocations })\r\n              cb(); // run uploadAnnoncesToDb after uploading images\r\n            }\r\n          })\r\n          .catch( err => console.log(err) );\r\n    }\r\n\r\n    getProfileImage = () => {\r\n        instanceAxs.get('/profile/getprofileimg?imageid=a@a/enebolig.jpeg').then(response => {\r\n            console.log(response)\r\n            this.setState({ isLoading: false })\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getProfileImage();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {!this.state.isLoading ? \r\n                <div>\r\n                    <input type=\"file\" name=\"image\" accept=\"image/*\" multiple onChange={this.onImageChange} required></input>\r\n                    <button onClick={this.uploadImage}>Upload</button>\r\n                </div>\r\n                :\r\n                <p>Loading</p>}\r\n            </div>         \r\n        )\r\n    }\r\n}\r\n\r\nexport default Profile;"]},"metadata":{},"sourceType":"module"}