{"ast":null,"code":"var _jsxFileName = \"/home/tolga/VS Code workspace/Brukth\\xE5nd/secondhand/src/Pages/Profile/Profile/Profile.js\";\nimport './Profile.css';\nimport React from 'react';\nimport { instanceAxs } from '../../../config/api.js';\nimport { getCroppedImage } from '../../../utils/cropImage';\nimport { dataURLtoFile } from '../../../utils/dataURltoFile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.uploadImage = async event => {\n      event.preventDefault();\n      const formData = await this.convertImagesToFormData();\n      this.uploadImagesToServer(formData);\n    };\n\n    this.onImageChange = async event => {\n      if (!event.target.files) return; //target.files seçilen dosyaları döner\n\n      const imageArray = [];\n      Array.from(event.target.files).forEach(file => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.addEventListener('load', () => imageArray.push({\n          name: file.name,\n          data: reader.result\n        }));\n      });\n      this.setState({\n        imageArray\n      });\n    };\n\n    this.convertImagesToFormData = async () => {\n      var formData = new FormData();\n      const imageArray = this.state.imageArray;\n\n      for (const image of imageArray) {\n        //await kullanımı için for...of döngüsü\n        const canvas = await getCroppedImage(image.data);\n        const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n        const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\n        formData.append(\"profileImage\", convertedUrltoFile);\n        return formData;\n      }\n    };\n\n    this.uploadImagesToServer = (formData, cb) => {\n      instanceAxs.post('/newannonce/imageupload', formData).then(result => {\n        if (result.data.message === 'images uploaded') {\n          var imageLocations = result.data.files.map(e => e.location);\n          this.setState({\n            imageLocations\n          });\n          cb(); // run uploadAnnoncesToDb after uploading images\n        }\n      }).catch(err => console.log(err));\n    };\n\n    this.convertToBase64 = file => {\n      return new Promise(resolse => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n\n        reader.onload = () => {\n          resolse(reader.result);\n        };\n      });\n    };\n\n    this.getProfileImage = () => {\n      instanceAxs.get('/profile/getprofileimg?image_name=profilePicture.jpeg').then(response => {\n        console.log(response);\n        this.setState({\n          isLoading: false,\n          profileImgLink: response.data\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      profileImgLink: '',\n      profileImgBinary: 'null',\n      isLoading: false\n    };\n  }\n\n  componentDidMount() {// this.getProfileImage();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !this.state.isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          accept: \"image/*\",\n          onChange: this.onImageChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.uploadImage,\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.convertImagesToFormData,\n          children: \"Show\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"http://localhost:3080/profile/getprofileimg?image_name=profilePicture.jpeg\",\n          alt: \"pp\",\n          width: \"500\",\n          height: \"600\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Profile;","map":{"version":3,"sources":["/home/tolga/VS Code workspace/Brukthånd/secondhand/src/Pages/Profile/Profile/Profile.js"],"names":["React","instanceAxs","getCroppedImage","dataURLtoFile","Profile","Component","constructor","props","uploadImage","event","preventDefault","formData","convertImagesToFormData","uploadImagesToServer","onImageChange","target","files","imageArray","Array","from","forEach","file","reader","FileReader","readAsDataURL","addEventListener","push","name","data","result","setState","FormData","state","image","canvas","canvasDataUrl","toDataURL","convertedUrltoFile","append","cb","post","then","message","imageLocations","map","e","location","catch","err","console","log","convertToBase64","Promise","resolse","onload","getProfileImage","get","response","isLoading","profileImgLink","error","profileImgBinary","componentDidMount","render"],"mappings":"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","sourcesContent":["import './Profile.css';\r\nimport React from 'react';\r\nimport { instanceAxs } from '../../../config/api.js';\r\nimport { getCroppedImage } from '../../../utils/cropImage';\r\nimport { dataURLtoFile } from '../../../utils/dataURltoFile';\r\n\r\nclass Profile extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            profileImgLink: '',\r\n            profileImgBinary: 'null',\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    uploadImage = async (event) => {\r\n        event.preventDefault()\r\n        const formData = await this.convertImagesToFormData();\r\n        this.uploadImagesToServer(formData);\r\n    }\r\n\r\n    onImageChange = async (event) => {\r\n        if(!event.target.files) return;   //target.files seçilen dosyaları döner\r\n      \r\n        const imageArray = [];\r\n        Array.from(event.target.files).forEach(file => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.addEventListener('load', () => imageArray.push({ name: file.name, data: reader.result }))\r\n        })\r\n        this.setState({ imageArray })\r\n      };\r\n\r\n      convertImagesToFormData =  async () => {\r\n        var formData = new FormData();\r\n        const imageArray = this.state.imageArray;\r\n      \r\n        for (const image of imageArray) {   //await kullanımı için for...of döngüsü\r\n          const canvas = await getCroppedImage(image.data);\r\n          const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\r\n          const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\r\n      \r\n          formData.append(\"profileImage\", convertedUrltoFile);\r\n          return formData;\r\n        }\r\n       }\r\n\r\n       uploadImagesToServer =  (formData, cb) => {\r\n        instanceAxs.post('/newannonce/imageupload', formData).then(result => {\r\n      \r\n            if (result.data.message === 'images uploaded') {\r\n              var imageLocations = result.data.files.map(e => e.location)\r\n              this.setState({ imageLocations })\r\n              cb(); // run uploadAnnoncesToDb after uploading images\r\n            }\r\n          })\r\n          .catch( err => console.log(err) );\r\n       }\r\n\r\n      convertToBase64 = (file) => {\r\n        return new Promise(resolse => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => {\r\n                resolse(reader.result)\r\n            }\r\n        })\r\n      }\r\n\r\n\r\n\r\n    getProfileImage = () => {\r\n        instanceAxs.get('/profile/getprofileimg?image_name=profilePicture.jpeg').then(response => {\r\n            console.log(response)\r\n            this.setState({ isLoading: false, profileImgLink: response.data})\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.getProfileImage();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {!this.state.isLoading ? \r\n                <div>\r\n                    <input type=\"file\" name=\"image\" accept=\"image/*\"  onChange={this.onImageChange} required></input>\r\n                    <button onClick={this.uploadImage}>Upload</button>  \r\n                    <button onClick={this.convertImagesToFormData}>Show</button>  \r\n                    <img src='http://localhost:3080/profile/getprofileimg?image_name=profilePicture.jpeg' alt=\"pp\" width=\"500\" height=\"600\"/>\r\n                </div>\r\n                :\r\n                <p>Loading</p>}\r\n            </div>         \r\n        )\r\n    }\r\n}\r\n\r\nexport default Profile;"]},"metadata":{},"sourceType":"module"}