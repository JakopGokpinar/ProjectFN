{"ast":null,"code":"var _jsxFileName = \"/home/tolga/VS Code workspace/Brukth\\xE5nd/secondhand/src/Pages/Profile/Profile/Profile.js\";\nimport './Profile.css';\nimport React from 'react';\nimport { instanceAxs } from '../../../config/api.js';\nimport { getCroppedImage } from '../../../utils/cropImage';\nimport { dataURLtoFile } from '../../../utils/dataURltoFile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.uploadImage = async event => {\n      event.preventDefault();\n      const formData = await this.convertImagesToFormData();\n      this.uploadImagesToServer(formData);\n    };\n\n    this.onImageChange = async event => {\n      if (!event.target.files) return; //target.files seçilen dosyaları döner\n\n      const file = event.target.files[0];\n      console.log(file);\n      const convertedFile = await this.convertToBase64(file);\n    };\n\n    this.convertToBase64 = file => {\n      return new Promise(resolse => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n\n        reader.onload = () => {\n          resolse(reader.result);\n        };\n      });\n    };\n\n    this.convertImagesToFormData = async () => {\n      var formData = new FormData();\n      const image = this.state.profileImgBinary;\n      return console.log(image);\n      const canvas = await getCroppedImage(image.data);\n      const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\n      const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\n      formData.append(\"profileImage\", convertedUrltoFile);\n      return formData;\n    };\n\n    this.getProfileImage = () => {\n      instanceAxs.get('/profile/getprofileimg?image_name=profilePicture.jpeg').then(response => {\n        console.log(response);\n        this.setState({\n          isLoading: false,\n          profileImgLink: response.data\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      profileImgLink: '',\n      profileImgBinary: 'null',\n      isLoading: false\n    };\n  }\n\n  componentDidMount() {// this.getProfileImage();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !this.state.isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          accept: \"image/*\",\n          onChange: this.onImageChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.uploadImage,\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.convertImagesToFormData,\n          children: \"Show\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"http://localhost:3080/profile/getprofileimg?image_name=profilePicture.jpeg\",\n          alt: \"pp\",\n          width: \"500\",\n          height: \"600\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Profile;","map":{"version":3,"sources":["/home/tolga/VS Code workspace/Brukthånd/secondhand/src/Pages/Profile/Profile/Profile.js"],"names":["React","instanceAxs","getCroppedImage","dataURLtoFile","Profile","Component","constructor","props","uploadImage","event","preventDefault","formData","convertImagesToFormData","uploadImagesToServer","onImageChange","target","files","file","console","log","convertedFile","convertToBase64","Promise","resolse","reader","FileReader","readAsDataURL","onload","result","FormData","image","state","profileImgBinary","canvas","data","canvasDataUrl","toDataURL","convertedUrltoFile","name","append","getProfileImage","get","then","response","setState","isLoading","profileImgLink","catch","error","componentDidMount","render"],"mappings":"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","sourcesContent":["import './Profile.css';\r\nimport React from 'react';\r\nimport { instanceAxs } from '../../../config/api.js';\r\nimport { getCroppedImage } from '../../../utils/cropImage';\r\nimport { dataURLtoFile } from '../../../utils/dataURltoFile';\r\n\r\nclass Profile extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            profileImgLink: '',\r\n            profileImgBinary: 'null',\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    uploadImage = async (event) => {\r\n        event.preventDefault()\r\n        const formData = await this.convertImagesToFormData();\r\n        this.uploadImagesToServer(formData);\r\n    }\r\n\r\n    onImageChange = async (event) => {\r\n        if(!event.target.files) return;   //target.files seçilen dosyaları döner\r\n      \r\n        const file = event.target.files[0];\r\n        console.log(file)\r\n        \r\n        const convertedFile = await this.convertToBase64(file);\r\n      };\r\n\r\n      convertToBase64 = (file) => {\r\n        return new Promise(resolse => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => {\r\n                resolse(reader.result)\r\n            }\r\n        })\r\n      }\r\n\r\n      convertImagesToFormData =  async () => {\r\n        var formData = new FormData();\r\n        const image = this.state.profileImgBinary;\r\n        return console.log(image)\r\n          const canvas = await getCroppedImage(image.data);\r\n          const canvasDataUrl = canvas.toDataURL(\"image/jpeg\");\r\n          const convertedUrltoFile = dataURLtoFile(canvasDataUrl, image.name);\r\n      \r\n          formData.append(\"profileImage\", convertedUrltoFile);\r\n          return formData;     \r\n       }\r\n\r\n\r\n\r\n    getProfileImage = () => {\r\n        instanceAxs.get('/profile/getprofileimg?image_name=profilePicture.jpeg').then(response => {\r\n            console.log(response)\r\n            this.setState({ isLoading: false, profileImgLink: response.data})\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.getProfileImage();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {!this.state.isLoading ? \r\n                <div>\r\n                    <input type=\"file\" name=\"image\" accept=\"image/*\"  onChange={this.onImageChange} required></input>\r\n                    <button onClick={this.uploadImage}>Upload</button>  \r\n                    <button onClick={this.convertImagesToFormData}>Show</button>  \r\n                    <img src='http://localhost:3080/profile/getprofileimg?image_name=profilePicture.jpeg' alt=\"pp\" width=\"500\" height=\"600\"/>\r\n                </div>\r\n                :\r\n                <p>Loading</p>}\r\n            </div>         \r\n        )\r\n    }\r\n}\r\n\r\nexport default Profile;"]},"metadata":{},"sourceType":"module"}